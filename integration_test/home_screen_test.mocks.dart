// Mocks generated by Mockito 5.4.5 from annotations
// in task_buddy/test/integration/home_screen_integration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:task_buddy/features/task_management/domain/enums/category_enum.dart'
    as _i6;
import 'package:task_buddy/features/task_management/domain/models/task_model.dart'
    as _i4;
import 'package:task_buddy/features/task_management/domain/models/user_analytics_model.dart'
    as _i8;
import 'package:task_buddy/features/task_management/domain/repositories/task_repository.dart'
    as _i2;
import 'package:task_buddy/features/task_management/domain/services/smart_priority_service.dart'
    as _i5;
import 'package:task_buddy/features/task_management/domain/services/user_analytics_service.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i2.TaskRepository {
  MockTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> createTask(_i4.TaskModel? task) => (super.noSuchMethod(
        Invocation.method(
          #createTask,
          [task],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i4.TaskModel?> getTaskById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getTaskById,
          [id],
        ),
        returnValue: _i3.Future<_i4.TaskModel?>.value(),
      ) as _i3.Future<_i4.TaskModel?>);

  @override
  _i3.Future<List<_i4.TaskModel>> getAllTasks() => (super.noSuchMethod(
        Invocation.method(
          #getAllTasks,
          [],
        ),
        returnValue: _i3.Future<List<_i4.TaskModel>>.value(<_i4.TaskModel>[]),
      ) as _i3.Future<List<_i4.TaskModel>>);

  @override
  _i3.Future<void> updateTask(_i4.TaskModel? task) => (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteTask(_i4.TaskModel? task) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [task],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [SmartPriorityService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSmartPriorityService extends _i1.Mock
    implements _i5.SmartPriorityService {
  MockSmartPriorityService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> recalculatePriorities(_i6.CategoryEnum? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #recalculatePriorities,
          [category],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> recalculateAllPriorities() => (super.noSuchMethod(
        Invocation.method(
          #recalculateAllPriorities,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> onTaskCompleted(_i4.TaskModel? completedTask) =>
      (super.noSuchMethod(
        Invocation.method(
          #onTaskCompleted,
          [completedTask],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> onTaskCreated(_i4.TaskModel? newTask) => (super.noSuchMethod(
        Invocation.method(
          #onTaskCreated,
          [newTask],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> onTaskUpdated(_i4.TaskModel? updatedTask) =>
      (super.noSuchMethod(
        Invocation.method(
          #onTaskUpdated,
          [updatedTask],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [UserAnalyticsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserAnalyticsService extends _i1.Mock
    implements _i7.UserAnalyticsService {
  MockUserAnalyticsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.UserAnalyticsModel? getAnalyticsForCategory(_i6.CategoryEnum? category) =>
      (super.noSuchMethod(Invocation.method(
        #getAnalyticsForCategory,
        [category],
      )) as _i8.UserAnalyticsModel?);

  @override
  void onTaskCreated(_i4.TaskModel? task) => super.noSuchMethod(
        Invocation.method(
          #onTaskCreated,
          [task],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTaskCompleted(_i4.TaskModel? task) => super.noSuchMethod(
        Invocation.method(
          #onTaskCompleted,
          [task],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTaskUncompleted(_i4.TaskModel? task) => super.noSuchMethod(
        Invocation.method(
          #onTaskUncompleted,
          [task],
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, _i8.UserAnalyticsModel> getAllAnalytics() => (super.noSuchMethod(
        Invocation.method(
          #getAllAnalytics,
          [],
        ),
        returnValue: <String, _i8.UserAnalyticsModel>{},
      ) as Map<String, _i8.UserAnalyticsModel>);

  @override
  void clearAnalytics() => super.noSuchMethod(
        Invocation.method(
          #clearAnalytics,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
