import 'package:mockito/mockito.dart';
import 'package:task_buddy/features/task_management/domain/models/task_model.dart';
import 'test_constants.dart';

// Import mock classes - these will be generated by build_runner
typedef MockTaskRepository = dynamic;
typedef MockSmartPriorityService = dynamic;
typedef MockUserAnalyticsService = dynamic;

/// Helper functions for common test operations
///
/// Provides utility methods for setting up mocks, verifying interactions,
/// and performing common test operations to reduce code duplication
class TestHelpers {
  /// Sets up a mock TaskRepository with specific task data
  static void setupMockTaskRepositoryWithData(
    MockTaskRepository mock,
    List<TaskModel> tasks,
  ) {
    when(mock.getAllTasks()).thenAnswer((_) => Future.value(tasks));
    when(mock.createTask(any)).thenAnswer((_) => Future.value());
    when(mock.updateTask(any)).thenAnswer((_) => Future.value());
    when(mock.deleteTask(any)).thenAnswer((_) => Future.value());

    // Set up getTaskById for each task
    for (final task in tasks) {
      when(mock.getTaskById(task.id)).thenAnswer((_) => Future.value(task));
    }
  }

  /// Verifies that getAllTasks was called on the repository
  static void verifyGetAllTasksWasCalled(MockTaskRepository mock) {
    verify(mock.getAllTasks()).called(1);
  }

  /// Creates a mock database error
  static Exception createDatabaseException([String? message]) {
    return Exception(message ?? TestConstants.databaseErrorMessage);
  }
}
