// Mocks generated by Mockito 5.4.5 from annotations
// in task_buddy/test/unit/providers/computed_providers_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:mockito/mockito.dart' as _i1;
import 'package:task_buddy/features/task_management/domain/enums/category_enum.dart'
    as _i4;
import 'package:task_buddy/features/task_management/domain/enums/priority_enum.dart'
    as _i5;
import 'package:task_buddy/features/task_management/domain/models/task_model.dart'
    as _i3;
import 'package:task_buddy/features/task_management/domain/models/user_analytics_model.dart'
    as _i10;
import 'package:task_buddy/features/task_management/domain/repositories/task_repository.dart'
    as _i6;
import 'package:task_buddy/features/task_management/domain/services/smart_priority_service.dart'
    as _i8;
import 'package:task_buddy/features/task_management/domain/services/task_filter_service.dart'
    as _i2;
import 'package:task_buddy/features/task_management/domain/services/user_analytics_service.dart'
    as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TaskFilterService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskFilterService extends _i1.Mock implements _i2.TaskFilterService {
  MockTaskFilterService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.TaskModel> filterTasks({
    required List<_i3.TaskModel>? tasks,
    String? searchQuery,
    _i4.CategoryEnum? category,
    _i5.Priority? priority,
    bool? isCompleted,
    DateTime? dueDateFrom,
    DateTime? dueDateTo,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #filterTasks,
          [],
          {
            #tasks: tasks,
            #searchQuery: searchQuery,
            #category: category,
            #priority: priority,
            #isCompleted: isCompleted,
            #dueDateFrom: dueDateFrom,
            #dueDateTo: dueDateTo,
          },
        ),
        returnValue: <_i3.TaskModel>[],
      ) as List<_i3.TaskModel>);

  @override
  List<_i3.TaskModel> getOverdueTasks(List<_i3.TaskModel>? tasks) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOverdueTasks,
          [tasks],
        ),
        returnValue: <_i3.TaskModel>[],
      ) as List<_i3.TaskModel>);

  @override
  List<_i3.TaskModel> getTasksDueToday(List<_i3.TaskModel>? tasks) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasksDueToday,
          [tasks],
        ),
        returnValue: <_i3.TaskModel>[],
      ) as List<_i3.TaskModel>);

  @override
  List<_i3.TaskModel> getTasksDueOn(
    DateTime? date,
    List<_i3.TaskModel>? tasks,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasksDueOn,
          [
            date,
            tasks,
          ],
        ),
        returnValue: <_i3.TaskModel>[],
      ) as List<_i3.TaskModel>);

  @override
  Map<String, int> getTaskCounts(List<_i3.TaskModel>? tasks) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTaskCounts,
          [tasks],
        ),
        returnValue: <String, int>{},
      ) as Map<String, int>);
}

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i6.TaskRepository {
  MockTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<void> createTask(_i3.TaskModel? task) => (super.noSuchMethod(
        Invocation.method(
          #createTask,
          [task],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<_i3.TaskModel?> getTaskById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getTaskById,
          [id],
        ),
        returnValue: _i7.Future<_i3.TaskModel?>.value(),
      ) as _i7.Future<_i3.TaskModel?>);

  @override
  _i7.Future<List<_i3.TaskModel>> getAllTasks() => (super.noSuchMethod(
        Invocation.method(
          #getAllTasks,
          [],
        ),
        returnValue: _i7.Future<List<_i3.TaskModel>>.value(<_i3.TaskModel>[]),
      ) as _i7.Future<List<_i3.TaskModel>>);

  @override
  _i7.Future<void> updateTask(_i3.TaskModel? task) => (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> deleteTask(_i3.TaskModel? task) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [task],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [SmartPriorityService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSmartPriorityService extends _i1.Mock
    implements _i8.SmartPriorityService {
  MockSmartPriorityService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<void> recalculatePriorities(_i4.CategoryEnum? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #recalculatePriorities,
          [category],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> recalculateAllPriorities() => (super.noSuchMethod(
        Invocation.method(
          #recalculateAllPriorities,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> onTaskCompleted(_i3.TaskModel? completedTask) =>
      (super.noSuchMethod(
        Invocation.method(
          #onTaskCompleted,
          [completedTask],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> onTaskCreated(_i3.TaskModel? newTask) => (super.noSuchMethod(
        Invocation.method(
          #onTaskCreated,
          [newTask],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> onTaskUpdated(_i3.TaskModel? updatedTask) =>
      (super.noSuchMethod(
        Invocation.method(
          #onTaskUpdated,
          [updatedTask],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [UserAnalyticsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserAnalyticsService extends _i1.Mock
    implements _i9.UserAnalyticsService {
  MockUserAnalyticsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.UserAnalyticsModel? getAnalyticsForCategory(
          _i4.CategoryEnum? category) =>
      (super.noSuchMethod(Invocation.method(
        #getAnalyticsForCategory,
        [category],
      )) as _i10.UserAnalyticsModel?);

  @override
  void onTaskCreated(_i3.TaskModel? task) => super.noSuchMethod(
        Invocation.method(
          #onTaskCreated,
          [task],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTaskCompleted(_i3.TaskModel? task) => super.noSuchMethod(
        Invocation.method(
          #onTaskCompleted,
          [task],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTaskUncompleted(_i3.TaskModel? task) => super.noSuchMethod(
        Invocation.method(
          #onTaskUncompleted,
          [task],
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, _i10.UserAnalyticsModel> getAllAnalytics() => (super.noSuchMethod(
        Invocation.method(
          #getAllAnalytics,
          [],
        ),
        returnValue: <String, _i10.UserAnalyticsModel>{},
      ) as Map<String, _i10.UserAnalyticsModel>);

  @override
  void clearAnalytics() => super.noSuchMethod(
        Invocation.method(
          #clearAnalytics,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
