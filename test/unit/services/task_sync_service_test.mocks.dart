// Mocks generated by Mockito 5.4.5 from annotations
// in task_buddy/test/unit/services/task_sync_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:task_buddy/features/task_management/data/datasources/task_remote_datasource.dart'
    as _i2;
import 'package:task_buddy/features/task_management/domain/models/task_model.dart'
    as _i4;
import 'package:task_buddy/shared/data/sync/sync_queue.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TaskRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRemoteDataSource extends _i1.Mock
    implements _i2.TaskRemoteDataSource {
  MockTaskRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> createTask(_i4.TaskModel? task) => (super.noSuchMethod(
        Invocation.method(
          #createTask,
          [task],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteTask(_i4.TaskModel? task) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [task],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i4.TaskModel>> getAllTasks() => (super.noSuchMethod(
        Invocation.method(
          #getAllTasks,
          [],
        ),
        returnValue: _i3.Future<List<_i4.TaskModel>>.value(<_i4.TaskModel>[]),
      ) as _i3.Future<List<_i4.TaskModel>>);

  @override
  _i3.Future<_i4.TaskModel?> getTaskById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getTaskById,
          [id],
        ),
        returnValue: _i3.Future<_i4.TaskModel?>.value(),
      ) as _i3.Future<_i4.TaskModel?>);

  @override
  _i3.Future<void> updateTask(_i4.TaskModel? task) => (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<bool> isRemoteAvailable() => (super.noSuchMethod(
        Invocation.method(
          #isRemoteAvailable,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}

/// A class which mocks [SyncQueue].
///
/// See the documentation for Mockito's code generation for more information.
class MockSyncQueue extends _i1.Mock implements _i5.SyncQueue {
  MockSyncQueue() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isEmpty => (super.noSuchMethod(
        Invocation.getter(#isEmpty),
        returnValue: false,
      ) as bool);

  @override
  bool get isProcessing => (super.noSuchMethod(
        Invocation.getter(#isProcessing),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> saveQueue() => (super.noSuchMethod(
        Invocation.method(
          #saveQueue,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> enqueue(_i5.SyncOperation? operation) => (super.noSuchMethod(
        Invocation.method(
          #enqueue,
          [operation],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> processQueue(
          dynamic Function(_i5.SyncOperation)? syncFunction) =>
      (super.noSuchMethod(
        Invocation.method(
          #processQueue,
          [syncFunction],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> dequeue() => (super.noSuchMethod(
        Invocation.method(
          #dequeue,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
