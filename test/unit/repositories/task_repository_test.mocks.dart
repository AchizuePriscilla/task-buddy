// Mocks generated by Mockito 5.4.5 from annotations
// in task_buddy/test/unit/repositories/task_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:task_buddy/features/task_management/data/datasources/task_local_datasource.dart'
    as _i2;
import 'package:task_buddy/features/task_management/domain/models/task_model.dart'
    as _i4;
import 'package:task_buddy/features/task_management/domain/services/task_sync_service.dart'
    as _i5;
import 'package:task_buddy/shared/data/sync/sync_queue.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TaskLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskLocalDataSource extends _i1.Mock
    implements _i2.TaskLocalDataSource {
  MockTaskLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> createTask(_i4.TaskModel? task) => (super.noSuchMethod(
        Invocation.method(
          #createTask,
          [task],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i4.TaskModel?> getTaskById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getTaskById,
          [id],
        ),
        returnValue: _i3.Future<_i4.TaskModel?>.value(),
      ) as _i3.Future<_i4.TaskModel?>);

  @override
  _i3.Future<List<_i4.TaskModel>> getAllTasks() => (super.noSuchMethod(
        Invocation.method(
          #getAllTasks,
          [],
        ),
        returnValue: _i3.Future<List<_i4.TaskModel>>.value(<_i4.TaskModel>[]),
      ) as _i3.Future<List<_i4.TaskModel>>);

  @override
  _i3.Future<void> updateTask(_i4.TaskModel? task) => (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteTask(_i4.TaskModel? task) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [task],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [TaskSyncService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskSyncService extends _i1.Mock implements _i5.TaskSyncService {
  MockTaskSyncService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isQueueEmpty => (super.noSuchMethod(
        Invocation.getter(#isQueueEmpty),
        returnValue: false,
      ) as bool);

  @override
  bool get isQueueProcessing => (super.noSuchMethod(
        Invocation.getter(#isQueueProcessing),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<void> queueSyncOperation(
    _i6.SyncOperationType? type,
    _i4.TaskModel? task,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #queueSyncOperation,
          [
            type,
            task,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i4.TaskModel>> syncWithRemote(
          List<_i4.TaskModel>? localTasks) =>
      (super.noSuchMethod(
        Invocation.method(
          #syncWithRemote,
          [localTasks],
        ),
        returnValue: _i3.Future<List<_i4.TaskModel>>.value(<_i4.TaskModel>[]),
      ) as _i3.Future<List<_i4.TaskModel>>);

  @override
  _i3.Future<bool> isRemoteAvailable() => (super.noSuchMethod(
        Invocation.method(
          #isRemoteAvailable,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}
